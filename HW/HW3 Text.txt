{"cells":[{"cell_type":"markdown","id":"43e0c2ad-c4c1-42da-8181-6d76bec34e0e","metadata":{"id":"43e0c2ad-c4c1-42da-8181-6d76bec34e0e"},"source":["Welcome to Homework 3! The goal of this homework is to better understand generative models by implementing Probabilistic PCA on your own."]},{"cell_type":"markdown","id":"5b034214","metadata":{},"source":["Q1: Describe the model for PPCA in terms of the mean vector $\\mu$, the matrix $B$ describing the linear transformation from the latent data $z$ to the observed data $x$, and the variance $\\sigma^2$ of the isotropic Gaussian noise in the observed data. What are the model parameters that need to be estimated and what are their dimensions? When describing the probability model, be explicit regarding the dimensions of random variables/vectors. (5 points)"]},{"cell_type":"markdown","id":"fe7d2f60","metadata":{},"source":["Q2: Based on your description, implement a function for generating `n` observations from a PPCA model, which takes in as arguments the mean vector $\\mu$, the matrix $B$, the variance $\\sigma^2$ of the isotropic Gaussian noise in the observed data, and the number of observations $n$. (5 points)"]},{"cell_type":"markdown","id":"00702b0b","metadata":{},"source":["Q3: What is the closed form solution for PPCA from maximum likelihood estimation? Provide the equations. Be explicit with all dimensions. Make sure all notation used is defined. (5 points)"]},{"cell_type":"markdown","id":"7ee1488f","metadata":{},"source":["Q4: Implement a function that performs maximum likelihood estimation for PPCA. The function should take in the observed data and the dimension of the latent factors $m$. It should return $\\hat{\\mu}, \\hat{B},$ and $\\hat{\\sigma}^2$. (15 points)"]},{"cell_type":"markdown","id":"5dabe287","metadata":{},"source":["Q5: Test out your implementation of PPCA. Generate data using your function from Q2. Generate $n=1000$ observations with $m=2$ latent dimensions, $p=4$ observed dimensions, $\\mu=\\vec{0}_4$, $B = np.array([[1,1],[0,1],[1,0],[1,-1]])$, and $\\sigma^2 = 0.25$. What are your estimates for the model parameters? How close are your estimated parameters for $\\mu$ and $\\sigma^2$ to the truth? To check your estimate for $B$, check that $\\hat{B} \\hat{B}^\\top$ is close to $B B^\\top$. (Hint: Your solution should be pretty close.) (5 points)"]},{"cell_type":"markdown","id":"d98cce15","metadata":{},"source":["Q6: We will now apply PPCA to the MNIST digit dataset, but only for images of the digit zero. Import and filter the MNIST digit dataset to only images of the digit zero using the following code. Then use the `visualize_digits` function to visualize the first four digits in this dataset. (1 point)\n","```\n","from sklearn import datasets\n","from matplotlib import pyplot as plt\n","\n","# Load the data\n","digits = datasets.load_digits()\n","\n","# filter for digit zero\n","zero_idxs = digits.target == 0\n","mnist0_imgs = digits.images[zero_idxs]\n","\n","# flatten the images into vectors\n","mnist0_X = mnist0_imgs.reshape((len(mnist0_imgs), -1))\n","\n","def visualize_digits(mnist_flattened_X):\n","    # This function will visualize the first 4 digits in the provided data\n","    _, axes = plt.subplots(nrows=1, ncols=4, figsize=(10, 3))\n","    for ax, image in zip(axes, mnist_flattened_X):\n","        ax.set_axis_off()\n","        image = image.reshape(8, 8)\n","        ax.imshow(image, cmap=plt.cm.gray_r, interpolation=\"nearest\")\n","```"]},{"cell_type":"markdown","id":"861e47ae","metadata":{},"source":["Q7: Apply your PPCA model fitting code to the MNIST dataset, restricting to only those images of the digit zero. Use latent dimension 3 to fit the PPCA model. (1 point)"]},{"cell_type":"markdown","id":"8d1b2784","metadata":{},"source":["Q8: Now generate four images of the digit zero using your fitted model (use the function you implemented in Q2)! Visualize your generated images using the helper function `visualize_digits`. Note that you might need to cast the generated data to float and truncate any generated pixel values smaller than zero. (3 points)"]}],"metadata":{"colab":{"provenance":[]},"kernelspec":{"display_name":"venv","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.9.6"}},"nbformat":4,"nbformat_minor":5}







































