{"cells":[{"cell_type":"markdown","id":"43e0c2ad-c4c1-42da-8181-6d76bec34e0e","metadata":{"id":"43e0c2ad-c4c1-42da-8181-6d76bec34e0e"},"source":["Welcome to Lab 7! \n","\n","In class, we learned about how to implement logistic regression using Pytorch. Now it's your turn to try out implementing a neural network in Pytorch.\n","\n","For lab, the task is to train a dense neural network to predict clothing types from black and white images from FashionMNIST.\n","\n","Read the tutorial at https://pytorch.org/tutorials/beginner/basics/intro.html, which aims to do this exact task. You can reuse as much of the code from that tutorial in lab. After you complete the tutorial, you can even try to improve on it!\n"]},{"cell_type":"markdown","id":"1e35d573","metadata":{},"source":["Q1: Download and prepare data from FashionMNIST for training and testing in PyTorch."]},{"cell_type":"code","execution_count":1,"id":"1ce3f916","metadata":{},"outputs":[],"source":["import os\n","import torch\n","from torch import nn\n","from torch.utils.data import DataLoader\n","from torchvision import datasets\n","from torchvision.transforms import ToTensor\n","\n","training_data = datasets.FashionMNIST(\n","    root=\"data\",\n","    train=True,\n","    download=True,\n","    transform=ToTensor()\n",")\n","\n","test_data = datasets.FashionMNIST(\n","    root=\"data\",\n","    train=False,\n","    download=True,\n","    transform=ToTensor()\n",")\n","\n","train_dataloader = DataLoader(training_data, batch_size=64)\n","test_dataloader = DataLoader(test_data, batch_size=64)"]},{"cell_type":"markdown","id":"89d82f21","metadata":{},"source":["Q2: What type of prediction task is this (regression, binary classification, multiclass classification, unsupervised learning, etc)? What objective function is most appropriate for training such a model?"]},{"cell_type":"code","execution_count":2,"id":"fcf7d521","metadata":{},"outputs":[],"source":["# multiclass\n","loss_fn = nn.CrossEntropyLoss()"]},{"cell_type":"markdown","id":"917d43f2","metadata":{},"source":["Q3: Create a model class for dense neural networks with at least 1 hidden layer. (If you are ambitious, create a model class that can make dense neural networks with an arbitrary number of hidden layers.)"]},{"cell_type":"code","execution_count":3,"id":"1e11c9e4","metadata":{},"outputs":[],"source":["class NeuralNetwork(nn.Module):\n","    def __init__(self):\n","        super().__init__()\n","        self.flatten = nn.Flatten()\n","        self.linear_relu_stack = nn.Sequential(\n","            nn.Linear(28*28, 512),\n","            nn.ReLU(),\n","            nn.Linear(512, 512),\n","            nn.ReLU(),\n","            nn.Linear(512, 10),\n","        )\n","\n","    def forward(self, x):\n","        x = self.flatten(x)\n","        logits = self.linear_relu_stack(x)\n","        return logits\n","\n","model = NeuralNetwork()"]},{"cell_type":"markdown","id":"435d64b7","metadata":{},"source":["Q4: Instantiate an optimizer for training this model. What are your choices in PyTorch? Which one are you going to choose and why? (There is no one right answer for this question.)"]},{"cell_type":"code","execution_count":4,"id":"456327b1","metadata":{},"outputs":[],"source":["# instantiate a mini-batch SGD optimizer\n","optimizer = torch.optim.SGD(model.parameters(), lr=0.01)\n","\n","# other options include Adam, RMSProp, and more"]},{"cell_type":"markdown","id":"37eaec78","metadata":{},"source":["Q5: Instantiate a neural network and train it! Plot the training loss."]},{"cell_type":"code","execution_count":5,"id":"e7e9c270","metadata":{},"outputs":[{"name":"stdout","output_type":"stream","text":["Epoch 1\n","-------------------------------\n","loss: 2.311111  [   64/60000]\n","loss: 2.165900  [ 6464/60000]\n","loss: 1.801161  [12864/60000]\n","loss: 1.488664  [19264/60000]\n","loss: 1.128836  [25664/60000]\n","loss: 1.045192  [32064/60000]\n","loss: 1.003575  [38464/60000]\n","loss: 0.864222  [44864/60000]\n","loss: 0.857008  [51264/60000]\n","loss: 0.804709  [57664/60000]\n","Epoch 2\n","-------------------------------\n","loss: 0.787782  [   64/60000]\n","loss: 0.842186  [ 6464/60000]\n","loss: 0.574933  [12864/60000]\n","loss: 0.770246  [19264/60000]\n","loss: 0.647364  [25664/60000]\n","loss: 0.631742  [32064/60000]\n","loss: 0.712761  [38464/60000]\n","loss: 0.681813  [44864/60000]\n","loss: 0.688345  [51264/60000]\n","loss: 0.640047  [57664/60000]\n","Epoch 3\n","-------------------------------\n","loss: 0.563839  [   64/60000]\n","loss: 0.656629  [ 6464/60000]\n","loss: 0.434929  [12864/60000]\n","loss: 0.657452  [19264/60000]\n","loss: 0.568118  [25664/60000]\n","loss: 0.553490  [32064/60000]\n","loss: 0.596220  [38464/60000]\n","loss: 0.646005  [44864/60000]\n","loss: 0.660641  [51264/60000]\n","loss: 0.554178  [57664/60000]\n","Epoch 4\n","-------------------------------\n","loss: 0.474574  [   64/60000]\n","loss: 0.571298  [ 6464/60000]\n","loss: 0.378700  [12864/60000]\n","loss: 0.590870  [19264/60000]\n","loss: 0.515571  [25664/60000]\n","loss: 0.513479  [32064/60000]\n","loss: 0.541600  [38464/60000]\n","loss: 0.649557  [44864/60000]\n","loss: 0.646013  [51264/60000]\n","loss: 0.492886  [57664/60000]\n","Epoch 5\n","-------------------------------\n","loss: 0.416885  [   64/60000]\n","loss: 0.525664  [ 6464/60000]\n","loss: 0.346387  [12864/60000]\n","loss: 0.545177  [19264/60000]\n","loss: 0.474099  [25664/60000]\n","loss: 0.483522  [32064/60000]\n","loss: 0.511216  [38464/60000]\n","loss: 0.647198  [44864/60000]\n","loss: 0.624481  [51264/60000]\n","loss: 0.455462  [57664/60000]\n","Epoch 6\n","-------------------------------\n","loss: 0.374911  [   64/60000]\n","loss: 0.498483  [ 6464/60000]\n","loss: 0.323315  [12864/60000]\n","loss: 0.514049  [19264/60000]\n","loss: 0.446040  [25664/60000]\n","loss: 0.462506  [32064/60000]\n","loss: 0.487607  [38464/60000]\n","loss: 0.634794  [44864/60000]\n","loss: 0.602621  [51264/60000]\n","loss: 0.433421  [57664/60000]\n","Epoch 7\n","-------------------------------\n","loss: 0.343498  [   64/60000]\n","loss: 0.478766  [ 6464/60000]\n","loss: 0.305221  [12864/60000]\n","loss: 0.494002  [19264/60000]\n","loss: 0.423252  [25664/60000]\n","loss: 0.447461  [32064/60000]\n","loss: 0.466556  [38464/60000]\n","loss: 0.617368  [44864/60000]\n","loss: 0.583995  [51264/60000]\n","loss: 0.420413  [57664/60000]\n","Epoch 8\n","-------------------------------\n","loss: 0.321245  [   64/60000]\n","loss: 0.462435  [ 6464/60000]\n","loss: 0.290824  [12864/60000]\n","loss: 0.479323  [19264/60000]\n","loss: 0.404766  [25664/60000]\n","loss: 0.436176  [32064/60000]\n","loss: 0.448607  [38464/60000]\n","loss: 0.600469  [44864/60000]\n","loss: 0.565731  [51264/60000]\n","loss: 0.412030  [57664/60000]\n","Epoch 9\n","-------------------------------\n","loss: 0.305458  [   64/60000]\n","loss: 0.448152  [ 6464/60000]\n","loss: 0.279087  [12864/60000]\n","loss: 0.467981  [19264/60000]\n","loss: 0.388414  [25664/60000]\n","loss: 0.427355  [32064/60000]\n","loss: 0.432953  [38464/60000]\n","loss: 0.585505  [44864/60000]\n","loss: 0.550114  [51264/60000]\n","loss: 0.404521  [57664/60000]\n","Epoch 10\n","-------------------------------\n","loss: 0.294006  [   64/60000]\n","loss: 0.435036  [ 6464/60000]\n","loss: 0.270531  [12864/60000]\n","loss: 0.457417  [19264/60000]\n","loss: 0.374258  [25664/60000]\n","loss: 0.420014  [32064/60000]\n","loss: 0.419754  [38464/60000]\n","loss: 0.572539  [44864/60000]\n","loss: 0.537352  [51264/60000]\n","loss: 0.400403  [57664/60000]\n"]},{"data":{"text/plain":["[<matplotlib.lines.Line2D at 0x28639beb0>]"]},"execution_count":5,"metadata":{},"output_type":"execute_result"},{"data":{"image/png":"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","text/plain":["<Figure size 640x480 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["from matplotlib import pyplot as plt\n","\n","def train_loop(dataloader, model, loss_fn, optimizer, batch_size = 64):\n","    size = len(dataloader.dataset)\n","    # Set the model to training mode - important for batch normalization and dropout layers\n","    # Unnecessary in this situation but added for best practices\n","    model.train()\n","    all_losses = []\n","    for batch, (X, y) in enumerate(dataloader):\n","        # Compute prediction and loss\n","        pred = model(X)\n","        loss = loss_fn(pred, y)\n","\n","        # Backpropagation\n","        loss.backward()\n","        optimizer.step()\n","        optimizer.zero_grad()\n","\n","        loss, current = loss.item(), batch * batch_size + len(X)\n","        all_losses.append(loss)\n","        if batch % 100 == 0:\n","            print(f\"loss: {loss:>7f}  [{current:>5d}/{size:>5d}]\")\n","    return all_losses\n","\n","epochs = 10\n","all_losses = []\n","for t in range(epochs):\n","    print(f\"Epoch {t+1}\\n-------------------------------\")\n","    epoch_losses = train_loop(train_dataloader, model, loss_fn, optimizer)\n","    all_losses += epoch_losses\n","\n","plt.plot(all_losses)"]},{"cell_type":"markdown","id":"5d9cfcfe","metadata":{},"source":["Q6: Test the neural network on held out data. How does it perform?"]},{"cell_type":"code","execution_count":6,"id":"df599f46","metadata":{},"outputs":[{"name":"stdout","output_type":"stream","text":["Test Error: \n"," Accuracy: 83.4%, Avg loss: 0.464022 \n","\n"]}],"source":["def run_test(dataloader, model, loss_fn):\n","    # Set the model to evaluation mode - important for batch normalization and dropout layers\n","    # Unnecessary in this situation but added for best practices\n","    model.eval()\n","    size = len(dataloader.dataset)\n","    num_batches = len(dataloader)\n","    test_loss, correct = 0, 0\n","\n","    # Evaluating the model with torch.no_grad() ensures that no gradients are computed during test mode\n","    # also serves to reduce unnecessary gradient computations and memory usage for tensors with requires_grad=True\n","    with torch.no_grad():\n","        for X, y in dataloader:\n","            pred = model(X)\n","            test_loss += loss_fn(pred, y).item()\n","            correct += (pred.argmax(1) == y).type(torch.float).sum().item()\n","\n","    test_loss /= num_batches\n","    correct /= size\n","    print(f\"Test Error: \\n Accuracy: {(100*correct):>0.1f}%, Avg loss: {test_loss:>8f} \\n\")\n","\n","\n","run_test(test_dataloader, model, loss_fn)"]}],"metadata":{"colab":{"provenance":[]},"kernelspec":{"display_name":"venv","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.9.6"}},"nbformat":4,"nbformat_minor":5}
